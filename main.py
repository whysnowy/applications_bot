import disnake
from disnake.ext import commands
from disnake import TextInputStyle

GUILD_ID = "YOUR_GIULD_ID"  # —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä
ADMIN_CHANNEL_ID = "YOUR_ADMIN_CHANNEL_ID" # –∫–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ñ—Ñ–∞
ROLE_ID = "YOUR_BLACKLIST_ROLE_ID" # —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É

intents = disnake.Intents.default()
intents.members = True  # —á—Ç–æ–±—ã –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏
intents.message_content = False  # –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤

bot = commands.Bot(command_prefix="!", intents=intents, test_guilds=[GUILD_ID])

class Application(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç?",
                placeholder="–ø—Ä–∏–º–µ—Ä: 17",
                custom_id="–í–æ–∑—Ä–∞—Å—Ç",
                style=TextInputStyle.short,
                max_length=25
            ),
            disnake.ui.TextInput(
                label="–í–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ?",
                placeholder="–ø—Ä–∏–º–µ—Ä: steve",
                custom_id="–ù–∏–∫",
                style=TextInputStyle.short,
                max_length=32
            ),
            disnake.ui.TextInput(
                label="–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ?",
                placeholder="–ø—É—Å—Ç–æ–≤–∞—Ç–æ...",
                custom_id="–û—Ç–∫—É–¥–∞_—É–∑–Ω–∞–ª",
                style=TextInputStyle.short,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?",
                placeholder="–º–Ω–æ–≥–æ —á–µ–º...",
                custom_id="–ü–ª–∞–Ω—ã",
                style=TextInputStyle.paragraph,
                max_length=400
            ),
        ]
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        user = inter.author
        guild = bot.get_guild(GUILD_ID)
        member = guild.get_member(user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Å–¥–µ–ª–∞–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ)
        if member is not None and any(role.id == ROLE_ID for role in member.roles):
            await inter.response.send_message("‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏–≥—Ä–æ–∫–æ–º!", ephemeral=True)
            return

        embed = disnake.Embed(
            title="üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
            description=f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} (`{user}`)",
            color=disnake.Color.blurple()
        )
        for key, value in inter.text_values.items():
            embed.add_field(name=key.replace("_", " ").capitalize(), value=value[:1024], inline=False)

        view = ResponseButtons(member)

        channel = bot.get_channel(ADMIN_CHANNEL_ID)
        if not channel:
            await inter.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        await channel.send(embed=embed, view=view)

        await inter.response.send_message("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)


class ResponseButtons(disnake.ui.View):
    def __init__(self, member: disnake.Member):
        super().__init__(timeout=None)
        self.member = member

    @disnake.ui.button(label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", style=disnake.ButtonStyle.success)
    async def accept(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        role = inter.guild.get_role(ROLE_ID)
        if role is None:
            await inter.response.send_message("‚ùå –†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        try:
            await self.member.add_roles(role, reason="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        except disnake.Forbidden:
            await inter.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å.", ephemeral=True)
            return
        except Exception as e:
            await inter.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: {e}", ephemeral=True)
            return

        try:
            await self.member.send(f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Whitelist (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 15 –º–∏–Ω—É—Ç). –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä {inter.guild.name}!")
        except disnake.Forbidden:
            # –õ–° –∑–∞–∫—Ä—ã—Ç—ã - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

        await inter.response.edit_message(content=f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –†–æ–ª—å –≤—ã–¥–∞–Ω–∞ {self.member.mention}", view=None)

    @disnake.ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=disnake.ButtonStyle.danger)
    async def reject(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        try:
            await self.member.send(f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {inter.guild.name} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except disnake.Forbidden:
            # –õ–° –∑–∞–∫—Ä—ã—Ç—ã - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

        await inter.response.edit_message(content=f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è {self.member.mention}", view=None)


@bot.slash_command(description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
async def apply(inter: disnake.CommandInteraction):
    member = inter.author
    guild = bot.get_guild(GUILD_ID)
    member = guild.get_member(member.id)  # —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç Member, –∞ –Ω–µ User

    if member is None:
        await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if any(role.id == ROLE_ID for role in member.roles):
        await inter.response.send_message("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å, –∑–∞—è–≤–∫–∏ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.", ephemeral=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫—É
    class ApplyButton(disnake.ui.View):
        @disnake.ui.button(label="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", style=disnake.ButtonStyle.primary)
        async def open_modal(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
            await interaction.response.send_modal(Application())

    warning_embed = disnake.Embed(
        description="‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç—ã –õ–∏—á–Ω—ã–µ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.\n"
                    "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.",
        color=disnake.Color.orange()
    )

    await inter.response.send_message(embed=warning_embed, view=ApplyButton(), ephemeral=False)


@bot.event
async def on_ready():
    await bot.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name="–∞–Ω–∫–µ—Ç—ã"))
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

bot.run("BOT_TOKEN")

